import asyncio
import logging
from database import init_database, load_weights, save_weights
from websocket import start_websocket_connections, stop_websocket_connections
from signal_analyzer import SignalAnalyzer, stop_analysis
from globals import bot_status, indicator_weights
from learning import LearningSystem
from telegram import send_telegram_message

logger = logging.getLogger(__name__)

async def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        if bot_status.get('running', False):
            logger.info("Bot already running")
            return
            
        logger.info("Starting bot...")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await asyncio.to_thread(init_database)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–µ—Å–æ–≤
        loaded_weights = await asyncio.to_thread(load_weights)
        if loaded_weights:
            indicator_weights.update(loaded_weights)
            logger.info("Loaded weights from database")
        else:
            logger.info("Using default weights")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
        LearningSystem.initialize()
        
        # –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        asyncio.create_task(start_websocket_connections())
        logger.info("WebSocket connections started")
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        analyzer = SignalAnalyzer()
        asyncio.create_task(analyzer.analyze_all())
        logger.info("Signal analysis started")
        
        bot_status['running'] = True
        logger.info("Bot started successfully")
        await send_telegram_message("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        logger.exception("Bot start failed: %s", str(e))
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)[:200]}")
        raise

async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    try:
        if not bot_status.get('running', False):
            logger.info("Bot not running")
            return
            
        logger.info("Stopping bot...")
        bot_status['running'] = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await stop_websocket_connections()
        logger.info("WebSocket connections stopped")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        stop_analysis()
        logger.info("Signal analysis stopped")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.to_thread(save_weights, indicator_weights)
        await asyncio.to_thread(LearningSystem.save_performance)
        logger.info("Data saved successfully")
        
        logger.info("Bot stopped successfully")
        await send_telegram_message("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.exception("Bot stop failed: %s", str(e))
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {str(e)[:200]}")
        raise
