import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import logging
from fastapi import FastAPI, HTTPException
import uvicorn
from core import init_bot, stop_bot
from telegram import send_telegram_message, send_demo_signal, start_telegram_listener
from globals import bot_status

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title="Crypto Trading Bot Pro", version="2.0")

@app.on_event("startup")
async def startup_event():
    logger.info("Bot API started")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(start_telegram_listener())

@app.get("/")
def home():
    return {"status": "Bot is ready", "running": bot_status['running']}

@app.get("/start")
async def start():
    if bot_status['running']:
        return {"status": "already_running"}
    try:
        await init_bot()
        await send_telegram_message("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ! –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç.")
        if bot_status.get('first_run', True):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True
            await send_demo_signal()
            await send_telegram_message("‚úÖ <b>–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ 90%+.")
            bot_status['first_run'] = False
        return {"status": "started"}
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to start bot: {e}")

@app.get("/stop")
async def stop():
    if not bot_status['running']:
        return {"status": "already_stopped"}
    try:
        await stop_bot()
        await send_telegram_message("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return {"status": "stopped"}
    except Exception as e:
        logger.error(f"Error stopping bot: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to stop bot: {e}")

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=False, access_log=False)
