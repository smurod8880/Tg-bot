import aiohttp
import asyncio
import json
import logging
from datetime import datetime
from globals import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, bot_status
from database import store_signal as db_store_signal
from learning import LearningSystem

logger = logging.getLogger(__name__)

async def send_telegram_message(message: str, reply_markup=None):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("Telegram credentials not set")
        return
        
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
        
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    bot_status['signals_sent'] += 1
                    return True
    except Exception as e:
        logger.error(f"Error sending to Telegram: {e}")
    return False

async def send_signal(symbol, timeframe, signal_type, strength, accuracy, indicators, signal_id):
    try:
        db_store_signal(signal_id, symbol, timeframe, signal_type, strength, accuracy, indicators)
        
        message = f"""
üéØ <b>–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ [{signal_id[:6]}]</b>

<b>–ü–∞—Ä–∞:</b> {symbol}
<b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {timeframe}
<b>–°–∏–≥–Ω–∞–ª:</b> {'üìà –ü–û–ö–£–ü–ö–ê' if signal_type == 'BUY' else 'üìâ –ü–†–û–î–ê–ñ–ê'}
<b>–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {strength:.2%}
<b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {accuracy:.1f}%
<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b> {', '.join(indicators)}

<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        """
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –£—Å–ø–µ—Ö", "callback_data": f"signal_success:{signal_id}"},
                    {"text": "‚ùå –ù–µ—É–¥–∞—á–∞", "callback_data": f"signal_fail:{signal_id}"}
                ],
                [{"text": "üìä –û—Ç—á–µ—Ç", "callback_data": "performance_report"}]
            ]
        }
        
        await send_telegram_message(message.strip(), keyboard)
        
    except Exception as e:
        logger.error(f"Error sending signal: {e}")

async def handle_telegram_updates():
    if not TELEGRAM_BOT_TOKEN:
        return
        
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
    offset = 0
    
    while bot_status['running']:
        try:
            params = {'offset': offset, 'timeout': 30}
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        for update in data.get('result', []):
                            offset = update['update_id'] + 1
                            if 'message' in update:
                                await process_message(update['message'])
                            elif 'callback_query' in update:
                                await process_callback_query(update['callback_query'])
        except Exception as e:
            logger.error(f"Telegram update error: {e}")
        await asyncio.sleep(1)

async def process_message(message):
    chat_id = str(message['chat']['id'])
    text = message.get('text', '').lower()
    
    if chat_id != TELEGRAM_CHAT_ID:
        return
        
    if text == '/start':
        await send_start_message()
    elif text == '/status':
        await send_status_message()
    elif text == '/performance':
        await send_performance_report()
    elif text == '/start_bot':
        from core import init_bot
        await init_bot()
    elif text == '/stop_bot':
        from core import stop_bot
        await stop_bot()

async def process_callback_query(callback_query):
    try:
        data = callback_query['data']
        chat_id = str(callback_query['message']['chat']['id'])
        callback_id = callback_query['id']

        # üü¢ Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞
        async with aiohttp.ClientSession() as session:
            await session.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery",
                json={"callback_query_id": callback_id}
            )

        if chat_id != TELEGRAM_CHAT_ID:
            return

        if data.startswith('signal_success:'):
            signal_id = data.split(':')[1]
            await update_signal_result(signal_id, True)
            await send_telegram_message(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal_id[:6]} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π")
        elif data.startswith('signal_fail:'):
            signal_id = data.split(':')[1]
            await update_signal_result(signal_id, False)
            await send_telegram_message(f"‚ùå –°–∏–≥–Ω–∞–ª {signal_id[:6]} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π")
        elif data == 'performance_report':
            await send_performance_report()
        elif data == 'start_bot':
            from core import init_bot
            await init_bot()
            await send_telegram_message("üü¢ –ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Telegram")
        elif data == 'stop_bot':
            from core import stop_bot
            await stop_bot()
            await send_telegram_message("üî¥ –ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram")
        elif data == 'get_status':
            await send_status_message()
    except Exception as e:
        logger.error(f"Error processing callback: {e}")

async def update_signal_result(signal_id, profitable):
    from database import update_signal_result as db_update_signal_result
    db_update_signal_result(signal_id, profitable)
    
    if profitable:
        bot_status['profitable_signals'] += 1
    else:
        bot_status['unprofitable_signals'] += 1
    
    LearningSystem.update_weights({
        'id': signal_id,
        'profitable': profitable
    })

async def send_start_message():
    keyboard = {
        "inline_keyboard": [
            [{"text": "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "callback_data": "start_bot"}],
            [{"text": "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", "callback_data": "stop_bot"}],
            [{"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "get_status"}],
            [{"text": "üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "callback_data": "performance_report"}]
        ]
    }
    await send_telegram_message("ü§ñ <b>Crypto Trading Bot PRO</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard)

async def send_status_message():
    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if bot_status['running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    profit_ratio = bot_status['profitable_signals'] / (bot_status['profitable_signals'] + bot_status['unprofitable_signals']) if (bot_status['profitable_signals'] + bot_status['unprofitable_signals']) > 0 else 0
    
    message = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
        f"{status}\n"
        f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {bot_status['connections']}\n"
        f"–°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bot_status['signals_sent']}\n"
        f"–£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {bot_status['profitable_signals']}\n"
        f"–ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {bot_status['unprofitable_signals']}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {profit_ratio:.2%}"
    )
    await send_telegram_message(message)

async def send_performance_report():
    report = LearningSystem.get_performance_report()
    if not report:
        await send_telegram_message("üìä –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
        
    message = "üìà <b>–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤</b>\n\n"
    for item in report[:10]:
        message += (
            f"{item['indicator']}:\n"
            f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {item['success_rate']:.2%}\n"
            f"  –í–µ—Å: {item['weight']:.4f}\n\n"
        )
    
    await send_telegram_message(message)
