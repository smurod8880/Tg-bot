import aiohttp
import asyncio
import json
import logging
from datetime import datetime
from globals import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, bot_status
from database import store_signal as db_store_signal
from learning import LearningSystem

logger = logging.getLogger(__name__)

async def send_telegram_message(message: str, reply_markup=None):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("Telegram credentials not set")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    bot_status['signals_sent'] += 1
                    return True
    except Exception as e:
        logger.error(f"Error sending to Telegram: {e}")
    return False

async def send_signal(symbol, timeframe, signal_type, strength, accuracy, indicators, signal_id):
    try:
        db_store_signal(signal_id, symbol, timeframe, signal_type, strength, accuracy, indicators)
        message = f"""
üéØ <b>–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ [{signal_id[:6]}]</b>

<b>–ü–∞—Ä–∞:</b> {symbol}
<b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {timeframe}
<b>–°–∏–≥–Ω–∞–ª:</b> {'üìà –ü–û–ö–£–ü–ö–ê' if signal_type == 'BUY' else 'üìâ –ü–†–û–î–ê–ñ–ê'}
<b>–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {strength:.2%}
<b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {accuracy:.1f}%
<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b> {', '.join(indicators)}

<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        """
        await send_telegram_message(message.strip())
    except Exception as e:
        logger.error(f"Error sending signal: {e}")

async def send_demo_signal():
    demo_signal_id = f"DEMO-{int(time.time())}"
    message = f"""
üéØ <b>–ü–†–ò–ú–ï–† –¢–û–†–ì–û–í–û–ì–û –°–ò–ì–ù–ê–õ–ê [{demo_signal_id[:6]}]</b>

<b>–ü–∞—Ä–∞:</b> BTCUSDT
<b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> 1h
<b>–°–∏–≥–Ω–∞–ª:</b> üìà –ü–û–ö–£–ü–ö–ê
<b>–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> 92.50%
<b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> 91.0%
<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b> EMA, MACD, RSI, Bollinger_Bands

<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª. –†–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞.
        """
    await send_telegram_message(message.strip())

async def handle_telegram_updates():
    if not TELEGRAM_BOT_TOKEN:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
    offset = 0
    while bot_status['running']:
        try:
            params = {'offset': offset, 'timeout': 30}
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        for update in data.get('result', []):
                            offset = update['update_id'] + 1
                            if 'message' in update:
                                await process_message(update['message'])
        except Exception as e:
            logger.error(f"Telegram update error: {e}")
        await asyncio.sleep(1)

async def process_message(message):
    chat_id = str(message['chat']['id'])
    text = message.get('text', '').lower()
    if chat_id != TELEGRAM_CHAT_ID:
        return
    if text == '/start':
        if bot_status['running']:
            await send_telegram_message("ü§ñ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        await send_telegram_message("ü§ñ <b>Crypto Trading Bot PRO</b>\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
        from core import init_bot
        await init_bot()
        await send_telegram_message("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ! –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç.")
        if bot_status['first_run']:
            await send_demo_signal()
            await send_telegram_message("‚úÖ <b>–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ 90%+.")
            bot_status['first_run'] = False
